#!/bin/sh

# Usage:
# `record`: Ask for recording type via dmenu
# `record screencast`: Record both audio and screen
# `record video`: Record only screen
# `record audio`: Record only audio
#
# If there is already a running instance, user will be prompted to end it.

DMENU="/usr/local/bin/dmenu"

updateicon() {
    echo "$1" > ~/.recordingicon
}

updatestatus() {
    echo "$1" > ~/.recordingstat
}

killRecording() {
    recpid="$(cat ~/.recordingpid)"
    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$recpid"
    rm -f ~/.recordingpid
    rm -f ~/.recordingstat
    updateicon ""
    exit
}

screenCast() {
    ffmpeg -y \
    -f x11grab \
    -draw_mouse 1 \
    -framerate 30 \
    -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
    -i :0.0+0,0 \
    -f pulse -i alsa_output.pci-0000_00_1b.0.analog-stereo.monitor \
    -f pulse -i alsa_input.pci-0000_00_1b.0.analog-stereo \
    -filter_complex amix=inputs=2 \
    -vf setpts=N/FR/TB \
    -c:a aac \
    -c:v libx264 -pix_fmt yuv420p -qp 18 -q:v 1 \
    -threads 4 \
    "$HOME/vid/ScreenRecorder/screencast-$(date '+%y%m%d-%H%M-%S').mp4" &
    echo $! > ~/.recordingpid
    updateicon " REC "
    updatestatus "record"
}

videoOnly() {
    ffmpeg \
    -f x11grab \
    -draw_mouse 1 \
    -framerate 30 \
    -s $(xdpyinfo | grep dimensions | awk '{print $2;}') \
    -i :0.0+0,0 \
    -vf setpts=N/FR/TB \
    -c:v libx264 -pix_fmt yuv420p -preset veryfast -q:v 1 \
    -threads 4 \
    "$HOME/vid/ScreenRecorder/video-$(date '+%y%m%d-%H%M-%S').mp4" &
    echo $! > ~/.recordingpid
    updateicon " REC "
    updatestatus "record"
}

audioOnly() {
    ffmpeg \
    -f pulse -i default \
    -c:a flac \
    "$HOME/vid/audio-$(date '+%y%m%d-%H%M-%S').flac" &
    echo $! > ~/.recordingpid
    updateicon " REC "
    updatestatus "record"
}

pauseRecording() {
    pkill -STOP ffmpeg
    updateicon " REC "
    updatestatus "pause"
}

resumeRecording() {
    pkill -CONT ffmpeg
    updateicon " REC "
    updatestatus "record"
}

asktoEnd() { \
    response=$(printf "Pause\nNo\nYes" | $DMENU -p " End Recording:") &&
    [ "$response" = "Pause" ] && pauseRecording
    [ "$response" = "Yes" ] && killRecording
    exit
}

asktoResume() { \
    response=$(printf "Resume" | $DMENU -p " Resume Recording:") &&
    [ "$response" = "Resume" ] && resumeRecording
    exit
}

if [ -f ~/.recordingpid ]; then
    if grep -q "record" ~/.recordingstat; then
        asktoEnd
        exit
    elif grep -q "pause" ~/.recordingstat; then
        asktoResume
        exit
    fi
fi

choice=$(printf "Screencast\nVideo\nAudio" | $DMENU -p " Record:")
case "$choice" in
    "Screencast") screenCast;;
    "Video") videoOnly;;
    "Audio") audioOnly;;
esac
